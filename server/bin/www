#!/usr/bin/env node

/**
 * Module dependencies.
 */

require("dotenv").config();
var fs = require("fs");
var path = require("path");
var app = require("../app");
var debug = require("debug")("server:server");
var https = require("https"); // ðŸ”¹ Utilisation de HTTPS

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Load SSL certificates.
 */

var options = {
  key: fs.readFileSync("/etc/letsencrypt/live/birthreminder.com/privkey.pem"),
  cert: fs.readFileSync(
    "/etc/letsencrypt/live/birthreminder.com/fullchain.pem"
  ),
};

/**
 * Create HTTPS server.
 */

var server = https.createServer(options, app); // ðŸ”¹ CrÃ©ation du serveur HTTPS

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(
    `âœ… Serveur HTTPS en cours d'exÃ©cution sur https://localhost:${port}`
  );
});

server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
