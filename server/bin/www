#!/usr/bin/env node

require("dotenv").config();
const fs = require("fs");
const path = require("path");
const app = require("../app");
const debug = require("debug")("server:server");
const https = require("https");
const http = require("http");

// Définition du port
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

// Vérifier si l'on est en production
const isProduction = process.env.NODE_ENV === "production";

let server;

if (isProduction) {
  try {
    const options = {
      key: fs.readFileSync(
        "/etc/letsencrypt/live/birthreminder.com/privkey.pem"
      ),
      cert: fs.readFileSync(
        "/etc/letsencrypt/live/birthreminder.com/fullchain.pem"
      ),
    };
    server = https.createServer(options, app);
    console.log("✅ Serveur HTTPS en production");
  } catch (error) {
    console.error("❌ Erreur lors du chargement des certificats SSL :", error);
    process.exit(1);
  }
} else {
  server = http.createServer(app);
  console.log("✅ Serveur HTTP en local");
}

// Démarrer le serveur
server.listen(port, () => {
  console.log(
    `✅ Serveur en cours d'exécution sur ${
      isProduction ? "HTTPS" : "HTTP"
    } sur le port ${port}`
  );
});

server.on("error", onError);
server.on("listening", onListening);

// Normalisation du port
function normalizePort(val) {
  const port = parseInt(val, 10);
  return isNaN(port) ? val : port >= 0 ? port : false;
}

// Gestion des erreurs du serveur
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Écoute de l'événement "listening"
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
