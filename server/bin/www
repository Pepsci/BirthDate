#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require("../app"); // Assurez-vous que ce fichier configure Express
const debug = require("debug")("server:server");
const http = require("http");
const https = require("https");
const fs = require("fs");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
const httpsPort = normalizePort(process.env.HTTPS_PORT || "3443"); // Port HTTPS
app.set("port", port);

// Déclarez les options SSL uniquement en production
let sslOptions = null;
if (process.env.NODE_ENV === "production") {
  sslOptions = {
    key: fs.readFileSync("/etc/letsencrypt/live/birthreminder.com/privkey.pem"),
    cert: fs.readFileSync(
      "/etc/letsencrypt/live/birthreminder.com/fullchain.pem"
    ),
  };
}

/**
 * Create HTTP and HTTPS servers.
 */
let server;
if (process.env.NODE_ENV === "production") {
  // En production : HTTPS
  server = https.createServer(sslOptions, app);
  server.listen(httpsPort, () => {
    console.log(`HTTPS Server running on port ${httpsPort}`);
  });
} else {
  // En développement : HTTP
  server = http.createServer(app);
  server.listen(port, () => {
    console.log(`HTTP Server running on port ${port}`);
  });
}

/**
 * Handle server errors.
 */
server.on("error", onError);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
